/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface ContractInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "CONFIRMATION_PERIOD"
      | "DISPUTE_PERIOD"
      | "REFERRAL_REWARD_PERCENT"
      | "_entropyCallback"
      | "activateReferralCode"
      | "buyProduct"
      | "changePrice"
      | "confirmPurchase"
      | "createProduct"
      | "forceConfirmPurchase"
      | "getJudgeCount"
      | "getProduct"
      | "getPurchase"
      | "getReferralRewards"
      | "indexJudge"
      | "isJudge"
      | "isSeller"
      | "judgeList"
      | "modifyQuantity"
      | "productCount"
      | "products"
      | "purchaseCountsPerProduct"
      | "purchases"
      | "raiseDispute"
      | "referrals"
      | "registerAsJudge"
      | "registerAsSeller"
      | "removeYourselfFromJudge"
      | "resolveDispute"
      | "toggleSaleStatus"
      | "updateProductMetadata"
      | "usdtToken"
      | "verifyWorldID"
      | "withdrawReferralRewards"
      | "withdrawUSDT"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "DisputeRaised"
      | "DisputeResolved"
      | "HumanVerified"
      | "JudgeAssigned"
      | "JudgeRegistered"
      | "JudgeRemoved"
      | "PriceChanged"
      | "ProductCreated"
      | "ProductMetadataUpdated"
      | "ProductPurchased"
      | "ProductRemoved"
      | "PurchaseConfirmed"
      | "QuantityModified"
      | "ReferralCodeActivated"
      | "ReferralCodeInActivated"
      | "ReferralRewardEarned"
      | "ReferralRewardsWithdrawn"
      | "SaleStatusChanged"
      | "SellerRegistered"
      | "USDTWithdrawn"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "CONFIRMATION_PERIOD",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DISPUTE_PERIOD",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "REFERRAL_REWARD_PERCENT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_entropyCallback",
    values: [BigNumberish, AddressLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "activateReferralCode",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "buyProduct",
    values: [BigNumberish, BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "changePrice",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "confirmPurchase",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createProduct",
    values: [string, BigNumberish, BigNumberish, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "forceConfirmPurchase",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getJudgeCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getProduct",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPurchase",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getReferralRewards",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "indexJudge",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isJudge",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isSeller",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "judgeList",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "modifyQuantity",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "productCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "products",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "purchaseCountsPerProduct",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "purchases",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "raiseDispute",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "referrals",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "registerAsJudge",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "registerAsSeller",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "removeYourselfFromJudge",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "resolveDispute",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "toggleSaleStatus",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateProductMetadata",
    values: [BigNumberish, string, string, string]
  ): string;
  encodeFunctionData(functionFragment: "usdtToken", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "verifyWorldID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawReferralRewards",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawUSDT",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "CONFIRMATION_PERIOD",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "DISPUTE_PERIOD",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "REFERRAL_REWARD_PERCENT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_entropyCallback",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "activateReferralCode",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "buyProduct", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "changePrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "confirmPurchase",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createProduct",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "forceConfirmPurchase",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getJudgeCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getProduct", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getPurchase",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getReferralRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "indexJudge", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isJudge", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isSeller", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "judgeList", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "modifyQuantity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "productCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "products", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "purchaseCountsPerProduct",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "purchases", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "raiseDispute",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "referrals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "registerAsJudge",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerAsSeller",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeYourselfFromJudge",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "resolveDispute",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "toggleSaleStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateProductMetadata",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "usdtToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "verifyWorldID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawReferralRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawUSDT",
    data: BytesLike
  ): Result;
}

export namespace DisputeRaisedEvent {
  export type InputTuple = [
    productId: BigNumberish,
    purchaseId: BigNumberish,
    judge: AddressLike
  ];
  export type OutputTuple = [
    productId: bigint,
    purchaseId: bigint,
    judge: string
  ];
  export interface OutputObject {
    productId: bigint;
    purchaseId: bigint;
    judge: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DisputeResolvedEvent {
  export type InputTuple = [
    productId: BigNumberish,
    purchaseId: BigNumberish,
    buyerAmount: BigNumberish,
    sellerAmount: BigNumberish
  ];
  export type OutputTuple = [
    productId: bigint,
    purchaseId: bigint,
    buyerAmount: bigint,
    sellerAmount: bigint
  ];
  export interface OutputObject {
    productId: bigint;
    purchaseId: bigint;
    buyerAmount: bigint;
    sellerAmount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace HumanVerifiedEvent {
  export type InputTuple = [user: AddressLike];
  export type OutputTuple = [user: string];
  export interface OutputObject {
    user: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace JudgeAssignedEvent {
  export type InputTuple = [
    productId: BigNumberish,
    purchaseId: BigNumberish,
    judge: AddressLike
  ];
  export type OutputTuple = [
    productId: bigint,
    purchaseId: bigint,
    judge: string
  ];
  export interface OutputObject {
    productId: bigint;
    purchaseId: bigint;
    judge: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace JudgeRegisteredEvent {
  export type InputTuple = [judge: AddressLike];
  export type OutputTuple = [judge: string];
  export interface OutputObject {
    judge: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace JudgeRemovedEvent {
  export type InputTuple = [judge: AddressLike];
  export type OutputTuple = [judge: string];
  export interface OutputObject {
    judge: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PriceChangedEvent {
  export type InputTuple = [id: BigNumberish, newPrice: BigNumberish];
  export type OutputTuple = [id: bigint, newPrice: bigint];
  export interface OutputObject {
    id: bigint;
    newPrice: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProductCreatedEvent {
  export type InputTuple = [
    id: BigNumberish,
    name: string,
    price: BigNumberish,
    quantity: BigNumberish,
    seller: AddressLike,
    ipfsLink: string,
    description: string
  ];
  export type OutputTuple = [
    id: bigint,
    name: string,
    price: bigint,
    quantity: bigint,
    seller: string,
    ipfsLink: string,
    description: string
  ];
  export interface OutputObject {
    id: bigint;
    name: string;
    price: bigint;
    quantity: bigint;
    seller: string;
    ipfsLink: string;
    description: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProductMetadataUpdatedEvent {
  export type InputTuple = [
    id: BigNumberish,
    name: string,
    newIpfsLink: string,
    newDescription: string
  ];
  export type OutputTuple = [
    id: bigint,
    name: string,
    newIpfsLink: string,
    newDescription: string
  ];
  export interface OutputObject {
    id: bigint;
    name: string;
    newIpfsLink: string;
    newDescription: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProductPurchasedEvent {
  export type InputTuple = [
    id: BigNumberish,
    buyer: AddressLike,
    quantity: BigNumberish,
    totalPrice: BigNumberish,
    purchaseId: BigNumberish,
    referrer: AddressLike
  ];
  export type OutputTuple = [
    id: bigint,
    buyer: string,
    quantity: bigint,
    totalPrice: bigint,
    purchaseId: bigint,
    referrer: string
  ];
  export interface OutputObject {
    id: bigint;
    buyer: string;
    quantity: bigint;
    totalPrice: bigint;
    purchaseId: bigint;
    referrer: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProductRemovedEvent {
  export type InputTuple = [
    id: BigNumberish,
    name: string,
    seller: AddressLike
  ];
  export type OutputTuple = [id: bigint, name: string, seller: string];
  export interface OutputObject {
    id: bigint;
    name: string;
    seller: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PurchaseConfirmedEvent {
  export type InputTuple = [
    productId: BigNumberish,
    purchaseId: BigNumberish,
    isForcedConfirmation: boolean
  ];
  export type OutputTuple = [
    productId: bigint,
    purchaseId: bigint,
    isForcedConfirmation: boolean
  ];
  export interface OutputObject {
    productId: bigint;
    purchaseId: bigint;
    isForcedConfirmation: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace QuantityModifiedEvent {
  export type InputTuple = [id: BigNumberish, newQuantity: BigNumberish];
  export type OutputTuple = [id: bigint, newQuantity: bigint];
  export interface OutputObject {
    id: bigint;
    newQuantity: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ReferralCodeActivatedEvent {
  export type InputTuple = [user: AddressLike];
  export type OutputTuple = [user: string];
  export interface OutputObject {
    user: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ReferralCodeInActivatedEvent {
  export type InputTuple = [user: AddressLike];
  export type OutputTuple = [user: string];
  export interface OutputObject {
    user: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ReferralRewardEarnedEvent {
  export type InputTuple = [referrer: AddressLike, amount: BigNumberish];
  export type OutputTuple = [referrer: string, amount: bigint];
  export interface OutputObject {
    referrer: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ReferralRewardsWithdrawnEvent {
  export type InputTuple = [user: AddressLike, amount: BigNumberish];
  export type OutputTuple = [user: string, amount: bigint];
  export interface OutputObject {
    user: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SaleStatusChangedEvent {
  export type InputTuple = [id: BigNumberish, isForSale: boolean];
  export type OutputTuple = [id: bigint, isForSale: boolean];
  export interface OutputObject {
    id: bigint;
    isForSale: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SellerRegisteredEvent {
  export type InputTuple = [seller: AddressLike];
  export type OutputTuple = [seller: string];
  export interface OutputObject {
    seller: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace USDTWithdrawnEvent {
  export type InputTuple = [
    id: BigNumberish,
    seller: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [id: bigint, seller: string, amount: bigint];
  export interface OutputObject {
    id: bigint;
    seller: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Contract extends BaseContract {
  connect(runner?: ContractRunner | null): Contract;
  waitForDeployment(): Promise<this>;

  interface: ContractInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  CONFIRMATION_PERIOD: TypedContractMethod<[], [bigint], "view">;

  DISPUTE_PERIOD: TypedContractMethod<[], [bigint], "view">;

  REFERRAL_REWARD_PERCENT: TypedContractMethod<[], [bigint], "view">;

  _entropyCallback: TypedContractMethod<
    [sequence: BigNumberish, provider: AddressLike, randomNumber: BytesLike],
    [void],
    "nonpayable"
  >;

  activateReferralCode: TypedContractMethod<[], [void], "nonpayable">;

  buyProduct: TypedContractMethod<
    [_id: BigNumberish, _quantity: BigNumberish, _referrer: AddressLike],
    [void],
    "nonpayable"
  >;

  changePrice: TypedContractMethod<
    [_id: BigNumberish, _newPrice: BigNumberish],
    [void],
    "nonpayable"
  >;

  confirmPurchase: TypedContractMethod<
    [_productId: BigNumberish, _purchaseId: BigNumberish],
    [void],
    "nonpayable"
  >;

  createProduct: TypedContractMethod<
    [
      _name: string,
      _price: BigNumberish,
      _quantity: BigNumberish,
      _ipfsLink: string,
      _description: string
    ],
    [void],
    "nonpayable"
  >;

  forceConfirmPurchase: TypedContractMethod<
    [_productId: BigNumberish, _purchaseId: BigNumberish],
    [void],
    "nonpayable"
  >;

  getJudgeCount: TypedContractMethod<[], [bigint], "view">;

  getProduct: TypedContractMethod<
    [_id: BigNumberish],
    [[bigint, string, bigint, bigint, boolean, string, bigint, string, string]],
    "view"
  >;

  getPurchase: TypedContractMethod<
    [_productId: BigNumberish, _purchaseId: BigNumberish],
    [
      [bigint, string, bigint, bigint, boolean, bigint, boolean, string, string]
    ],
    "view"
  >;

  getReferralRewards: TypedContractMethod<
    [_user: AddressLike],
    [bigint],
    "view"
  >;

  indexJudge: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  isJudge: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  isSeller: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  judgeList: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  modifyQuantity: TypedContractMethod<
    [_id: BigNumberish, _newQuantity: BigNumberish],
    [void],
    "nonpayable"
  >;

  productCount: TypedContractMethod<[], [bigint], "view">;

  products: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        bigint,
        string,
        bigint,
        bigint,
        boolean,
        string,
        bigint,
        string,
        string
      ] & {
        id: bigint;
        name: string;
        price: bigint;
        quantity: bigint;
        isForSale: boolean;
        seller: string;
        usdtBalance: bigint;
        ipfsLink: string;
        description: string;
      }
    ],
    "view"
  >;

  purchaseCountsPerProduct: TypedContractMethod<
    [arg0: BigNumberish],
    [bigint],
    "view"
  >;

  purchases: TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [
      [
        bigint,
        string,
        bigint,
        bigint,
        boolean,
        bigint,
        boolean,
        string,
        string
      ] & {
        id: bigint;
        buyer: string;
        quantity: bigint;
        totalPrice: bigint;
        isConfirmed: boolean;
        purchaseTime: bigint;
        isDisputed: boolean;
        judge: string;
        referrer: string;
      }
    ],
    "view"
  >;

  raiseDispute: TypedContractMethod<
    [_productId: BigNumberish, _purchaseId: BigNumberish],
    [void],
    "payable"
  >;

  referrals: TypedContractMethod<
    [arg0: AddressLike],
    [[boolean, bigint] & { isActive: boolean; totalRewards: bigint }],
    "view"
  >;

  registerAsJudge: TypedContractMethod<[], [void], "nonpayable">;

  registerAsSeller: TypedContractMethod<[], [void], "nonpayable">;

  removeYourselfFromJudge: TypedContractMethod<[], [void], "nonpayable">;

  resolveDispute: TypedContractMethod<
    [
      _productId: BigNumberish,
      _purchaseId: BigNumberish,
      _buyerAmount: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  toggleSaleStatus: TypedContractMethod<
    [_id: BigNumberish],
    [void],
    "nonpayable"
  >;

  updateProductMetadata: TypedContractMethod<
    [
      _id: BigNumberish,
      _name: string,
      _newIpfsLink: string,
      _newDescription: string
    ],
    [void],
    "nonpayable"
  >;

  usdtToken: TypedContractMethod<[], [string], "view">;

  verifyWorldID: TypedContractMethod<[], [string], "view">;

  withdrawReferralRewards: TypedContractMethod<[], [void], "nonpayable">;

  withdrawUSDT: TypedContractMethod<[_id: BigNumberish], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "CONFIRMATION_PERIOD"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "DISPUTE_PERIOD"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "REFERRAL_REWARD_PERCENT"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "_entropyCallback"
  ): TypedContractMethod<
    [sequence: BigNumberish, provider: AddressLike, randomNumber: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "activateReferralCode"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "buyProduct"
  ): TypedContractMethod<
    [_id: BigNumberish, _quantity: BigNumberish, _referrer: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "changePrice"
  ): TypedContractMethod<
    [_id: BigNumberish, _newPrice: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "confirmPurchase"
  ): TypedContractMethod<
    [_productId: BigNumberish, _purchaseId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "createProduct"
  ): TypedContractMethod<
    [
      _name: string,
      _price: BigNumberish,
      _quantity: BigNumberish,
      _ipfsLink: string,
      _description: string
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "forceConfirmPurchase"
  ): TypedContractMethod<
    [_productId: BigNumberish, _purchaseId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getJudgeCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getProduct"
  ): TypedContractMethod<
    [_id: BigNumberish],
    [[bigint, string, bigint, bigint, boolean, string, bigint, string, string]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getPurchase"
  ): TypedContractMethod<
    [_productId: BigNumberish, _purchaseId: BigNumberish],
    [
      [bigint, string, bigint, bigint, boolean, bigint, boolean, string, string]
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getReferralRewards"
  ): TypedContractMethod<[_user: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "indexJudge"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "isJudge"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "isSeller"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "judgeList"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "modifyQuantity"
  ): TypedContractMethod<
    [_id: BigNumberish, _newQuantity: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "productCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "products"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        bigint,
        string,
        bigint,
        bigint,
        boolean,
        string,
        bigint,
        string,
        string
      ] & {
        id: bigint;
        name: string;
        price: bigint;
        quantity: bigint;
        isForSale: boolean;
        seller: string;
        usdtBalance: bigint;
        ipfsLink: string;
        description: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "purchaseCountsPerProduct"
  ): TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "purchases"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [
      [
        bigint,
        string,
        bigint,
        bigint,
        boolean,
        bigint,
        boolean,
        string,
        string
      ] & {
        id: bigint;
        buyer: string;
        quantity: bigint;
        totalPrice: bigint;
        isConfirmed: boolean;
        purchaseTime: bigint;
        isDisputed: boolean;
        judge: string;
        referrer: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "raiseDispute"
  ): TypedContractMethod<
    [_productId: BigNumberish, _purchaseId: BigNumberish],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "referrals"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [[boolean, bigint] & { isActive: boolean; totalRewards: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "registerAsJudge"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "registerAsSeller"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "removeYourselfFromJudge"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "resolveDispute"
  ): TypedContractMethod<
    [
      _productId: BigNumberish,
      _purchaseId: BigNumberish,
      _buyerAmount: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "toggleSaleStatus"
  ): TypedContractMethod<[_id: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateProductMetadata"
  ): TypedContractMethod<
    [
      _id: BigNumberish,
      _name: string,
      _newIpfsLink: string,
      _newDescription: string
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "usdtToken"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "verifyWorldID"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "withdrawReferralRewards"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "withdrawUSDT"
  ): TypedContractMethod<[_id: BigNumberish], [void], "nonpayable">;

  getEvent(
    key: "DisputeRaised"
  ): TypedContractEvent<
    DisputeRaisedEvent.InputTuple,
    DisputeRaisedEvent.OutputTuple,
    DisputeRaisedEvent.OutputObject
  >;
  getEvent(
    key: "DisputeResolved"
  ): TypedContractEvent<
    DisputeResolvedEvent.InputTuple,
    DisputeResolvedEvent.OutputTuple,
    DisputeResolvedEvent.OutputObject
  >;
  getEvent(
    key: "HumanVerified"
  ): TypedContractEvent<
    HumanVerifiedEvent.InputTuple,
    HumanVerifiedEvent.OutputTuple,
    HumanVerifiedEvent.OutputObject
  >;
  getEvent(
    key: "JudgeAssigned"
  ): TypedContractEvent<
    JudgeAssignedEvent.InputTuple,
    JudgeAssignedEvent.OutputTuple,
    JudgeAssignedEvent.OutputObject
  >;
  getEvent(
    key: "JudgeRegistered"
  ): TypedContractEvent<
    JudgeRegisteredEvent.InputTuple,
    JudgeRegisteredEvent.OutputTuple,
    JudgeRegisteredEvent.OutputObject
  >;
  getEvent(
    key: "JudgeRemoved"
  ): TypedContractEvent<
    JudgeRemovedEvent.InputTuple,
    JudgeRemovedEvent.OutputTuple,
    JudgeRemovedEvent.OutputObject
  >;
  getEvent(
    key: "PriceChanged"
  ): TypedContractEvent<
    PriceChangedEvent.InputTuple,
    PriceChangedEvent.OutputTuple,
    PriceChangedEvent.OutputObject
  >;
  getEvent(
    key: "ProductCreated"
  ): TypedContractEvent<
    ProductCreatedEvent.InputTuple,
    ProductCreatedEvent.OutputTuple,
    ProductCreatedEvent.OutputObject
  >;
  getEvent(
    key: "ProductMetadataUpdated"
  ): TypedContractEvent<
    ProductMetadataUpdatedEvent.InputTuple,
    ProductMetadataUpdatedEvent.OutputTuple,
    ProductMetadataUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "ProductPurchased"
  ): TypedContractEvent<
    ProductPurchasedEvent.InputTuple,
    ProductPurchasedEvent.OutputTuple,
    ProductPurchasedEvent.OutputObject
  >;
  getEvent(
    key: "ProductRemoved"
  ): TypedContractEvent<
    ProductRemovedEvent.InputTuple,
    ProductRemovedEvent.OutputTuple,
    ProductRemovedEvent.OutputObject
  >;
  getEvent(
    key: "PurchaseConfirmed"
  ): TypedContractEvent<
    PurchaseConfirmedEvent.InputTuple,
    PurchaseConfirmedEvent.OutputTuple,
    PurchaseConfirmedEvent.OutputObject
  >;
  getEvent(
    key: "QuantityModified"
  ): TypedContractEvent<
    QuantityModifiedEvent.InputTuple,
    QuantityModifiedEvent.OutputTuple,
    QuantityModifiedEvent.OutputObject
  >;
  getEvent(
    key: "ReferralCodeActivated"
  ): TypedContractEvent<
    ReferralCodeActivatedEvent.InputTuple,
    ReferralCodeActivatedEvent.OutputTuple,
    ReferralCodeActivatedEvent.OutputObject
  >;
  getEvent(
    key: "ReferralCodeInActivated"
  ): TypedContractEvent<
    ReferralCodeInActivatedEvent.InputTuple,
    ReferralCodeInActivatedEvent.OutputTuple,
    ReferralCodeInActivatedEvent.OutputObject
  >;
  getEvent(
    key: "ReferralRewardEarned"
  ): TypedContractEvent<
    ReferralRewardEarnedEvent.InputTuple,
    ReferralRewardEarnedEvent.OutputTuple,
    ReferralRewardEarnedEvent.OutputObject
  >;
  getEvent(
    key: "ReferralRewardsWithdrawn"
  ): TypedContractEvent<
    ReferralRewardsWithdrawnEvent.InputTuple,
    ReferralRewardsWithdrawnEvent.OutputTuple,
    ReferralRewardsWithdrawnEvent.OutputObject
  >;
  getEvent(
    key: "SaleStatusChanged"
  ): TypedContractEvent<
    SaleStatusChangedEvent.InputTuple,
    SaleStatusChangedEvent.OutputTuple,
    SaleStatusChangedEvent.OutputObject
  >;
  getEvent(
    key: "SellerRegistered"
  ): TypedContractEvent<
    SellerRegisteredEvent.InputTuple,
    SellerRegisteredEvent.OutputTuple,
    SellerRegisteredEvent.OutputObject
  >;
  getEvent(
    key: "USDTWithdrawn"
  ): TypedContractEvent<
    USDTWithdrawnEvent.InputTuple,
    USDTWithdrawnEvent.OutputTuple,
    USDTWithdrawnEvent.OutputObject
  >;

  filters: {
    "DisputeRaised(uint256,uint256,address)": TypedContractEvent<
      DisputeRaisedEvent.InputTuple,
      DisputeRaisedEvent.OutputTuple,
      DisputeRaisedEvent.OutputObject
    >;
    DisputeRaised: TypedContractEvent<
      DisputeRaisedEvent.InputTuple,
      DisputeRaisedEvent.OutputTuple,
      DisputeRaisedEvent.OutputObject
    >;

    "DisputeResolved(uint256,uint256,uint256,uint256)": TypedContractEvent<
      DisputeResolvedEvent.InputTuple,
      DisputeResolvedEvent.OutputTuple,
      DisputeResolvedEvent.OutputObject
    >;
    DisputeResolved: TypedContractEvent<
      DisputeResolvedEvent.InputTuple,
      DisputeResolvedEvent.OutputTuple,
      DisputeResolvedEvent.OutputObject
    >;

    "HumanVerified(address)": TypedContractEvent<
      HumanVerifiedEvent.InputTuple,
      HumanVerifiedEvent.OutputTuple,
      HumanVerifiedEvent.OutputObject
    >;
    HumanVerified: TypedContractEvent<
      HumanVerifiedEvent.InputTuple,
      HumanVerifiedEvent.OutputTuple,
      HumanVerifiedEvent.OutputObject
    >;

    "JudgeAssigned(uint256,uint256,address)": TypedContractEvent<
      JudgeAssignedEvent.InputTuple,
      JudgeAssignedEvent.OutputTuple,
      JudgeAssignedEvent.OutputObject
    >;
    JudgeAssigned: TypedContractEvent<
      JudgeAssignedEvent.InputTuple,
      JudgeAssignedEvent.OutputTuple,
      JudgeAssignedEvent.OutputObject
    >;

    "JudgeRegistered(address)": TypedContractEvent<
      JudgeRegisteredEvent.InputTuple,
      JudgeRegisteredEvent.OutputTuple,
      JudgeRegisteredEvent.OutputObject
    >;
    JudgeRegistered: TypedContractEvent<
      JudgeRegisteredEvent.InputTuple,
      JudgeRegisteredEvent.OutputTuple,
      JudgeRegisteredEvent.OutputObject
    >;

    "JudgeRemoved(address)": TypedContractEvent<
      JudgeRemovedEvent.InputTuple,
      JudgeRemovedEvent.OutputTuple,
      JudgeRemovedEvent.OutputObject
    >;
    JudgeRemoved: TypedContractEvent<
      JudgeRemovedEvent.InputTuple,
      JudgeRemovedEvent.OutputTuple,
      JudgeRemovedEvent.OutputObject
    >;

    "PriceChanged(uint256,uint256)": TypedContractEvent<
      PriceChangedEvent.InputTuple,
      PriceChangedEvent.OutputTuple,
      PriceChangedEvent.OutputObject
    >;
    PriceChanged: TypedContractEvent<
      PriceChangedEvent.InputTuple,
      PriceChangedEvent.OutputTuple,
      PriceChangedEvent.OutputObject
    >;

    "ProductCreated(uint256,string,uint256,uint256,address,string,string)": TypedContractEvent<
      ProductCreatedEvent.InputTuple,
      ProductCreatedEvent.OutputTuple,
      ProductCreatedEvent.OutputObject
    >;
    ProductCreated: TypedContractEvent<
      ProductCreatedEvent.InputTuple,
      ProductCreatedEvent.OutputTuple,
      ProductCreatedEvent.OutputObject
    >;

    "ProductMetadataUpdated(uint256,string,string,string)": TypedContractEvent<
      ProductMetadataUpdatedEvent.InputTuple,
      ProductMetadataUpdatedEvent.OutputTuple,
      ProductMetadataUpdatedEvent.OutputObject
    >;
    ProductMetadataUpdated: TypedContractEvent<
      ProductMetadataUpdatedEvent.InputTuple,
      ProductMetadataUpdatedEvent.OutputTuple,
      ProductMetadataUpdatedEvent.OutputObject
    >;

    "ProductPurchased(uint256,address,uint256,uint256,uint256,address)": TypedContractEvent<
      ProductPurchasedEvent.InputTuple,
      ProductPurchasedEvent.OutputTuple,
      ProductPurchasedEvent.OutputObject
    >;
    ProductPurchased: TypedContractEvent<
      ProductPurchasedEvent.InputTuple,
      ProductPurchasedEvent.OutputTuple,
      ProductPurchasedEvent.OutputObject
    >;

    "ProductRemoved(uint256,string,address)": TypedContractEvent<
      ProductRemovedEvent.InputTuple,
      ProductRemovedEvent.OutputTuple,
      ProductRemovedEvent.OutputObject
    >;
    ProductRemoved: TypedContractEvent<
      ProductRemovedEvent.InputTuple,
      ProductRemovedEvent.OutputTuple,
      ProductRemovedEvent.OutputObject
    >;

    "PurchaseConfirmed(uint256,uint256,bool)": TypedContractEvent<
      PurchaseConfirmedEvent.InputTuple,
      PurchaseConfirmedEvent.OutputTuple,
      PurchaseConfirmedEvent.OutputObject
    >;
    PurchaseConfirmed: TypedContractEvent<
      PurchaseConfirmedEvent.InputTuple,
      PurchaseConfirmedEvent.OutputTuple,
      PurchaseConfirmedEvent.OutputObject
    >;

    "QuantityModified(uint256,uint256)": TypedContractEvent<
      QuantityModifiedEvent.InputTuple,
      QuantityModifiedEvent.OutputTuple,
      QuantityModifiedEvent.OutputObject
    >;
    QuantityModified: TypedContractEvent<
      QuantityModifiedEvent.InputTuple,
      QuantityModifiedEvent.OutputTuple,
      QuantityModifiedEvent.OutputObject
    >;

    "ReferralCodeActivated(address)": TypedContractEvent<
      ReferralCodeActivatedEvent.InputTuple,
      ReferralCodeActivatedEvent.OutputTuple,
      ReferralCodeActivatedEvent.OutputObject
    >;
    ReferralCodeActivated: TypedContractEvent<
      ReferralCodeActivatedEvent.InputTuple,
      ReferralCodeActivatedEvent.OutputTuple,
      ReferralCodeActivatedEvent.OutputObject
    >;

    "ReferralCodeInActivated(address)": TypedContractEvent<
      ReferralCodeInActivatedEvent.InputTuple,
      ReferralCodeInActivatedEvent.OutputTuple,
      ReferralCodeInActivatedEvent.OutputObject
    >;
    ReferralCodeInActivated: TypedContractEvent<
      ReferralCodeInActivatedEvent.InputTuple,
      ReferralCodeInActivatedEvent.OutputTuple,
      ReferralCodeInActivatedEvent.OutputObject
    >;

    "ReferralRewardEarned(address,uint256)": TypedContractEvent<
      ReferralRewardEarnedEvent.InputTuple,
      ReferralRewardEarnedEvent.OutputTuple,
      ReferralRewardEarnedEvent.OutputObject
    >;
    ReferralRewardEarned: TypedContractEvent<
      ReferralRewardEarnedEvent.InputTuple,
      ReferralRewardEarnedEvent.OutputTuple,
      ReferralRewardEarnedEvent.OutputObject
    >;

    "ReferralRewardsWithdrawn(address,uint256)": TypedContractEvent<
      ReferralRewardsWithdrawnEvent.InputTuple,
      ReferralRewardsWithdrawnEvent.OutputTuple,
      ReferralRewardsWithdrawnEvent.OutputObject
    >;
    ReferralRewardsWithdrawn: TypedContractEvent<
      ReferralRewardsWithdrawnEvent.InputTuple,
      ReferralRewardsWithdrawnEvent.OutputTuple,
      ReferralRewardsWithdrawnEvent.OutputObject
    >;

    "SaleStatusChanged(uint256,bool)": TypedContractEvent<
      SaleStatusChangedEvent.InputTuple,
      SaleStatusChangedEvent.OutputTuple,
      SaleStatusChangedEvent.OutputObject
    >;
    SaleStatusChanged: TypedContractEvent<
      SaleStatusChangedEvent.InputTuple,
      SaleStatusChangedEvent.OutputTuple,
      SaleStatusChangedEvent.OutputObject
    >;

    "SellerRegistered(address)": TypedContractEvent<
      SellerRegisteredEvent.InputTuple,
      SellerRegisteredEvent.OutputTuple,
      SellerRegisteredEvent.OutputObject
    >;
    SellerRegistered: TypedContractEvent<
      SellerRegisteredEvent.InputTuple,
      SellerRegisteredEvent.OutputTuple,
      SellerRegisteredEvent.OutputObject
    >;

    "USDTWithdrawn(uint256,address,uint256)": TypedContractEvent<
      USDTWithdrawnEvent.InputTuple,
      USDTWithdrawnEvent.OutputTuple,
      USDTWithdrawnEvent.OutputObject
    >;
    USDTWithdrawn: TypedContractEvent<
      USDTWithdrawnEvent.InputTuple,
      USDTWithdrawnEvent.OutputTuple,
      USDTWithdrawnEvent.OutputObject
    >;
  };
}
